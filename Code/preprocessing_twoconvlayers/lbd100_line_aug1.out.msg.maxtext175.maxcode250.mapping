92af89d37c415c61c676bb28ae7facdef1821477	staging wilc1000 restore wilc_spi_dev variable a recent change to wilc1000 accidentally deleted an important variable so we now get a build error when the spi mode is selected error wilc_spi_dev undefined this partially reverts the broken commit to put the variable back
fb16aaf58cbe902585fc3a2ce40d74a2de384ac2	media nuvoton-cir fix setting ioport base address at least on zotac ci321 acpi provides an ioport range for the wake up part but accessing these ioports has no effect instead the ioport base address is set to another value already in my case and accessing this ioport range works therefore set a new ioport base address only if the current ioport base address is __number__ register reset default the need to use the existing base address instead of trying to set an own one doesnt seem to be limited to this specific device as other drivers like do it the same way this change was successfully tested on the mentioned device and the change should be generic enough to not break the driver for other chips however due to lack of appropriate hardware i wasnt able to test this version
f56e7f8efb4ec200364f690a9902713410e24d47	tracing function fix trace header to follow context-info option the header display of function tracer does not follow the context-info option so field names are displayed even if this option is off added check for trace_iter_context_info trace_flags with following commands echo function echo __number__ cat trace this is what it looked like before tracer function task-pid timestamp function add_preempt_count rcu_note_context_switch this is what it looks like now tracer function _raw_spin_unlock_irqrestore link
06e9d040ba08b0f645783ff958384d5837b3fa3a	ipv6 drop metadata dst in ip6_route_input the fix in commit is incomplete as now ip6_route_input can be called with non-null dst if its a metadata dst and the reference is leaked drop the reference
63fbf59f8a31548e64cdc3adc5d0997be0486b27	nvmx reset rflags register cache during nested vmentry during nested vmentry into vm86 mode a vcpu state is found to be incorrect because rflags does not have vm flag set since it is read from the cache and has l1s value instead of l2s if l0 kvm tries to emulate it but emulation does not work for nvmx and it never should happen anyway fix that by using vmx_set_rflags to set rflags during nested vmentry which takes care of updating register cache
3424dabb6508d538e9ec1a2aa889fefbd83df2d0	metag perf fix core internal perf channel mux the value written to the perf_icorex or perf_chanx register to select the performance events for the core internal and perf channel events was tmp but tmp was set to config so it would always be __number__ correct it to use config instead of tmp
0dd09ca419d712d315ffd864158f515e6c64261a	iio light bh1780 assign a static name using the struct field for naming the light sensor is a bad idea when booting from the pure device tree this is null and that causes the device not to have the name property in sysfs and that in turn confuses the lsiio command to stop listing devices so instead of using the device use the hard string bh1780 which works just fine
14a20428e2e02600195a71ad366c0caef97bf3d4	spi lp-8841 return correct error code from probe the spi_lp8841_rtc_probe function misses an initialization of the return code when it fails to get its memory resource as gcc notices in function spi_lp8841_rtc_probe error ret may be used uninitialized in this function this changes the code to propagate the error from devm_ioremap_resource
4ba9faf35f6e49964ca6ed88fb0090cc4c727bf3	bluetooth check for matching irk when looking for paired le devices if were given an rpa when checking whether were paired or not we should consult the local rpa storage whether theres a matching irk this we we ensure that hci_bdaddr_is_paired gives the right result even when trying to pair a second time with the same device with an rpa
8f9818af4eaef1150282e18355aaea425474a411	hso fix deadlock when receiving bursts of data when the module sends bursts of data sometimes a deadlock happens in the hso driver when the tty buffer doesnt get the chance to be flushed quickly enough remove the endless while loop in function put_rxbuf_data which is called by the urb completion handler if there isnt enough room in the tty buffer discards all the data received in the urb
46bbc25f9ff1242cd1c042580aec11ddb5e41369	cifs override unmappable incoming uids and gids the cifs protocol has a space for uids and gids while linux only supports a space today instead of silently truncating cifs ids replace cifs ids that do not fit in the linux id space with the default uid and gids for the cifs mount
7c77ab24e30bad7598b5cfda93be6f32ed439c2f	net allow dcbnl to use other namespaces besides init_net allow dcb and net namespace to work together this is useful if you have containers that are bound to phys interfaces that want to also manage their dcb attributes the net namespace is taken from of the netlink skb
6216642f200258708e47170ff14ba8ecb486f4f0	bgmac register napi before the device napi should get registered before the netdev and not after
e06a03bdf8781d6a93a13d5bdf33d058ca498a86	fix the pause_time test pause_time is unsigned so it cant be less than zero the bug means that we allow invalid pause-times
5939d9dfe4406a49d8688eb827d88abcaf233c42	power twl4030_madc_battery add missing module_alias without module_alias twl4030_madc_battery wont get loaded automatically
b32a7cc63bee7bffbd61f88b157b78a9b2101de0	clk atlas7 fix pll missed divide nr in fraction mode pll vco frequency is given by fvco fref __number__ nf nr in integer-n mode or by fvco fref ssn nr in spread spectrum fractional-n mode thus fix the missing part of nr
1b74c25bc1a142ee8dd7ad080e2a974f28d1cb18	nfsd41 error out when client sets maxreq_sz or maxresp_sz too small according to rfc5661 if the client selects a value for ca_maxresponsesize such that a replier on a channel could never send a server should return nfs4err_toosmall in the create_session reply so error out when the client sets a maxreq_sz less than the minimum possible sequence request size or sets a maxresp_sz less than the minimum possible sequence reply size
d46183efe3b57d06461c9bea35e1a0262391fe77	asoc ad193x-spi fixup ad193x_spi_id table ad1939 is missed from the table so add it ad1936 and ad1937 are controlled by i2c interface so remove them
41009481b690493c169ce85f591b9d32c6fd9422	fix rtnl notifications on iface deletion the function geneve_dev_create_fb only used by ovs never calls rtnl_configure_link the consequence is that is never set to rtnl_link_initialized during the deletion phase the function rollback_registered_many sends a rtm_dellink only if is set to rtnl_link_initialized
b7a314054eb55e3745a9409beaa5d8be5cd2d273	isdn icn buffer overflow in icn_command this buffer over was detected using static analysis icn_command error format string overflow buf_size __number__ length __number__ the calculation for the length of the string is off because it assumes that the dial buffer holds a __number__ character string but actually it is at most __number__ characters and nul i have removed the dial buffer because it isnt needed the maximum length of the string is actually __number__ characters and a nul i have made the cbuf array large enough to hold it and changed the sprintf to an snprintf as a further safety enhancement
1896344b181549cea0ab38a810f4f8efcd6ecafb	gma500 fix leak of uncached page this was reported a long time ago and i apologize to whoever it was that reported it as ive lost the original report
13ad4fe3e087ab66a140f1e00d98f28aa4e3bb28	xfs xfs_filemap_pmd_fault treats read faults as write faults the code initially committed didnt have the same checks for write faults as the dax_pmd_fault code and hence treats all faults as write faults we can get read faults through this path because they is no pmd_mkwrite path for write faults similar to the normal page fault path hence we need to ensure that we only do updates on write faults and freeze protection is unnecessary for read faults
5572a95b4b5768187652a346356e39e7542ca6e0	ath10k apply chainmask settings to vdev on creation it appears it takes more than just setting the hardwares chainmask to make things work well without this patch a vdev would only use rates when chainmask was set to setting the nss number of spatial streams on the vdev helps the firmwares rate-control algorithm work properly
8742267af4043606869f5b8dadbef635405543c3	defer assignment of until after all possible mallocs as we may invoke the shrinker whilst trying to allocate memory to hold the gtt_space for this object we need to be careful not to mark the drm_mm_node as activated by assigning it to this object before we have finished our sequence of allocations note we also need to move the binding of the object into the actual pagetables down a bit the best way seems to be to move it out into the callsites danvet added small note to commit message to summarize review discussion
facd885c75067c2a88b72622dfb0fa4b9510da5e	tty fix data race on race on buffer data happens when newly committed data is picked up by an old flush work in the following scenario __tty_buffer_request_room does a plain write of no barriers were executed before that at this point flush_to_ldisc reads this new value of commit and reads buffer data no barriers in between the committed buffer data is not necessary visible to flush_to_ldisc similar bug happens when tty_schedule_flip commits data update commit with smp_store_release and read commit with smp_load_acquire as it is commit that signals data readiness this is orthogonal to the existing synchronization on which is required to not dismiss a buffer with unconsumed data the data race was found with kernelthreadsanitizer ktsan
0fd7bee1e9b68fd271ad87c3e705facd1ca38055	powerpc fix size of st_nlink on commit e57f93cc53b7 powerpc get rid of nlink_t uses switch to explicitly-sized type changed the size of st_nlink on ppc64 from a long to a short resulting in boot failures
e702781fa846dd726b73e673f91ffbd3b0e8d114	pci add dell studio __number__ to blacklist the dell studio __number__ also doesnt suspend correctly when crs is enabled details at
5c2e08231b68a3c8082716a7ed4e972dde406e4a	powerpc never handle vsx alignment exceptions from kernel the vsx alignment handler needs to write out the existing vsx state to memory before operating on it flush_vsx_to_thread if we take a vsx alignment exception in the kernel bad things will happen it looks like we could write the kernel state out to the user process or we could handle the kernel exception using data from the user process depending if msr_vsx is set or not worse still if the code to read or write the vsx state causes an alignment exception we will recurse forever i ended up with hundreds of megabytes of kernel stack to look through as a result floating point and spe code have similar issues but already include a user check add the same check to emulate_vsx with this patch any unaligned vsx loads and stores in the kernel will show up as a clear oops rather than silent corruption of kernel or userspace vsx state or worse corruption of a potentially unlimited amount of kernel memory
232f5dd78586a684a7364a486b934e19384189dc	fix address range for asynchronous stack git commit dc7ee00d4771 s390 lowcore stack pointer offsets introduced a regression in regard to s390_backtrace the stack pointer for the asynchronous stack in the lowcore now has an additional offset applied this offset needs to be taken into account in the calculation for the low and high address for the stack this bug was already partially fixed with commit fix address ranges for asynchronous and panic stack this patch fixes it also for the oprofile code
9a0c1e2770b839b806bae6bc8f93001f86bc0cf3	use the correct destructor for freeing requests on error after allocating from the slab cache we then need to free the request back into the slab cache upon error and not call kfree as that leads to eventual memory corruption fixes regression from commit efab6d8dd158fdccbe6a030f89fbf9ca0a9564e4 author chris wilson chris-wilson.co.uk date tue apr __number__ __number__ use a separate slab for requests
12cf93728dfba237b46001a95479829c7179cdc9	btrfs device_replace fix deadlock for nocow case commit cb7ab02156e4 cause a following deadlock found by thread1 is commiting transaction which is blocked at btrfs_scrub_pause thread2 is calling btrfs_file_aio_write which has held inodes and commit transactionblocked because thread1 is committing transaction thread3 is copy_nocow_page worker which will also try to hold inode so thread3 will wait thread1 finished thread4 is waiting pending workers finished which will wait thread3 finished so the problem is like this deadlock happens we fix it by letting thread1 go firstly which means we wont block transaction commit while we are waiting pending workers finished
35532c211b1feda52078685bef0bf9b5f3b0991c	drivers net cpsw fix broken loop condition in switch mode drivers net cpsw fix buggy loop condition accidentally fixed a loop comparison in too many places while fixing a real bug it was correct to fix the dual_emac mode section since there i is used as an index into which is a __number__ based array however the other two changes which are only used in switch mode are wrong since there i is actually the ale port number and port __number__ is the host port while port __number__ and up are the slave ports putting the loop condition back in the switch mode section fixes it a comment has been added to point out the intent clearly to avoid future confusion also a comment is fixed that said the opposite of what was actually happening
f5a00eb71902292c5a77d7cc27bdafd09ba3c112	dmaengine at_xdmac fix false condition for memset_sg transfers the code was not in agreement with the comments
0c416b54f29151a31999868d59c64ace11589d1b	scsi_transport_sas remove check for sas expander when querying ids dell server backplanes can report ids without an expander present this patch allows the ids to be propagaged to
a40a2b670706494610d794927b9aebe77e18af8d	fix divwu instruction opcode currently divwu stands for divw opcode __number__ divwu d6 divw use the divw opcode for divwu
62a02c98ce03bb214009509a4802b7b63f59621c	net fec dont clear ipv6 header checksum field when ip accelerator enable the commit net fec enable ip header hardware checksum enable hw ip header checksum for ipv4 and ipv6 which causes ipv6 cannot work the issue is reported by russell king for fec ip header checksum function insert ip header checksum this iins bit is written by the user if set ip accelerator calculates the ip header checksum and overwrites the iins corresponding header field with the calculated value the checksum field must be cleared by user otherwise the checksum always is so the previous patch clear ip header checksum field regardless of ip frame type in fact ip hw detect the packet as ipv6 type even if the iins bit is set the ip accelerator is not triggered to calculates ipv6 header checksum because ipv6 frame format dont have checksum so this results in the ipv6 frame being corrupted the patch just add software detect the current packet type if it is ipv6 frame it dont clear ip header checksum field
5588383ece6127909df5b9d601d562fe5b9fe38a	btrfs fix crash when mounting raid5 btrfs with missing disks the reproducer is d1 d2 d3 d2 d3 mount d1 __float__ cut here __float__ kernel bug at __float__ rip __address__ __address__ __float__ call trace __float__ __address__ __float__ __address__ __float__ __address__ __float__ __address__ __float__ __address__ __float__ __address__ __float__ __address__ __float__ __address__ __float__ __address__ __float__ __address__ __float__ __address__ __float__ __address__ __float__ __address__ __float__ __address__ its because that we miscalculate so that it doesnt reach maximum of tolerable errors while it should have
e2e210c0238eb7073e07af503ae743fa53977120	l2tp fix race in l2tp_recv_dequeue misha labjuk reported panics occurring in l2tp_recv_dequeue if we release we must not keep a dangling pointer tmp since another thread could manipulate reorder_q instead we must restart the scan at beginning of list
594416a72032684792bb22510c538098db10b750	block fix regression where bio_integrity_process uses wrong bio_vec iterator bio integrity handling is broken on a system with lvm layered atop a scsi drive because device mapper clones the bio modifies the clone and sends the clone to the lower layers for processing however the clone bio has bi_vcnt __number__ which means that when the sd driver calls bio_integrity_process to attach dix data the for_each_segment_all call which uses bi_vcnt returns immediately and random garbage is sent to the disk on a disk write the disk of course returns an error therefore teach bio_integrity_process to use bio_for_each_segment to iterate the bio_vecs since the per-bio iterator tracks which bio_vecs are associated with that particular bio the integrity handling code is effectively part of the driver its not the bio owner so it must use the correct iterator function v2 fix a compiler warning about abandoned local variables this patch supersedes block bio_integrity_process uses wrong bio_vec iterator patch applies against
47226ad4f4cfd1e91ded7f2ec42f83ff1c624663	only load initrd above on second try mantas found that after commit support initrd loaded above the kernel freezes at the earliest possible moment when trying to boot via uefi on asus laptop revert to old way to load initrd under on first try second try will use above buffer when initrd is too big and does not fit under the cause of the freeze appears to be a firmware bug when reading file data into buffers above though the exact reason is unknown mantas reports that the hang can be avoid if the file size is a multiple of __number__ bytes but ive seen some asus firmware simply corrupting the file data rather than freezing laszlo fixed an issue in the upstream edk2 diskio code in aug __number__ which may possibly be related commit fix pointer of overrun transfer whatever the cause its unlikely that a fix will be forthcoming from the vendor hence the workaround matt
5e9ae2e5da0beb93f8557fc92a8f4fbc05ea448f	aio fix use-after-free in aio_migratepage dmitry vyukov managed to trigger a case where aio_migratepage can cause a use-after-free during teardown of the aio ring buffers mapping this turns out to be caused by access to the ioctxs ring_pages via the migratepage operation which was not being protected by any locks during ioctx freeing use the address_spaces private_lock to protect use and updates of the mappings private_data and make ioctx teardown unlink the ioctx from the address space
7f97c000e87751fdca69d14cba2bbba795c1a972	serial fix serial_cs windows for argosy rs-com current serial_cs driver has a problem when trying to detect whether a card has multiple ports serial_config calls pcmcia_loop_config which iterates over card cis configurations by calling serial_check_for_multi for each of them this function wants to check and select a configuration that has either one long window spanning multiple ports or two windows for two serial ports problem is that every pcmcia_loop_config iteration only updates the windows via pcmcia_do_loop_config in resource0 and resource1 when conf_auto_set_io flag is set on the device which is set only later in the code fix it by setting this flag earlier in addition to this when multi-port card is detected and it does not have an one long window multi_config_check_notpicky tries to locate two windows and assumes they are continuous without checking on an argosy rs-com this selects first configuration which unfortunately has two non-continuous windows the net effect is that the second serial port on the card does not work fix it by checking whether the windows are really continuous
c18c2cec31881130c591ea60590859002945cd96	input wacom add abs_distance to bamboo pen reports tablet reports a distance of __number__ right at highest point possible to be in proximity and distance_max when touching tablet inverse the distance since user land has no way of knowing abs_distance is not distance from tablet
8e8da023f5af71662867729db5547dc54786093c	x86 fix boot failures on older amd cpus people with old amd chips are getting hung boots because commit bcb80e53877c x86 microcode amd add microcode revision to moved the microcode detection too early into early_init_amd at that point we are early in the booth that the exception tables havent even been set up yet so the whole rdmsr_safemsr_amd64_patch_level doesnt actually work if the rdmsr does a gp fault due to non-existant msr register on older cpus we cant fix it up yet and the boot fails fix it by simply moving the code to a slightly later point in the boot init_amd instead of early_init_amd since the kernel itself doesnt even really care about the microcode patchlevel at this point or really ever its made available to user space in and updated if you do a microcode load
d1f224ae186b834af647661ffaf403a817c050ce	l2tp fix refcount leak in l2tp_ip sockets the l2tp_ip socket close handler does not update the module refcount correctly which prevents module unload after the first bind call on an l2tpv3 ip encapulation socket
a52690e445637dda7f71878965d64d9b6a15a2b7	fix panel fitter setting if need to enable the panel fitter the crtc timings have to be programmed according to the panels native fixed mode this isnt the case atm since after the encoder changes adjusted_mode to fixed mode the timing fields of adjusted_mode will stay at their original non-native values that the user passed in this results in a corrupted output one exception is when we have a second pass of computing encoder configs due to bandwidth limitation since then well set fields to the fixed mode values set in the first pass so in this case things will work out fix this by updating the fields when we set the fixed panel mode this regression has been introduced in commit date sun jul __number__ __number__ clean up crtc timings computation
33b48e1633f738c5ae78234c2dd5e3a9ba115437	serial sh-sci fix possible race cases on scscr register accesses in the previous commit console write function serial_console_write is changed to disable sci interrupts while printing console strings this introduces possible race cases in the serial startup shutdown functions on smp systems this patch fixes the sh-sci in the same way as commit tty serial imx console write routing is unsafe on smp from xinyu chen did there could be several consumers of the console the kernel printk the init process using to call printk to show log shell which opens and writes with sys_write the shell goes into the normal uart open and write system calls while the other two go into the console operations the open call invokes serial startup function sci_startup which will write to the scscr register to enable or disable sci interrupts without any locking this will conflict with the console serial function add spinlock protections in sci_startup and sci_shutdown properly
8089ed792832e5d3dd219da435c5a08d969662b4	ubifs fix power cut emulation for mtdram the power cut emulation did not work correctly because we corrupted more than one max unit in the buffer and then wrote the entire buffer this lead to recovery errors because ubifs complained about corrupted free space and this was easily reproducible on mtdram because max write size is very small there __number__ bytes and we could easily have a buffer corrupt __number__ bytes there and then write the entire buffer the fix is to corrupt max write size bytes at most and write only up to the last corrupted max write size chunk not the entire buffer
1114ce8f361f3ff880b28f508ba2b0995d1540bb	rtlwifi rtl8188ee missing curly braces in handle_branch1 from the indenting it seems like the read_next_pair was supposed to be inside the while loop
1fa4252af760560f77ca3d5d360fd62df3292c7f	fix an endian bug in atom table parsing
ce9a9fc20a78ad1e5222fae3a83d105f2d2fb9b9	iser-target fix reject cm event use-after-free oops this patch fixes a bug in iser-target code where the reject cm event handler code currently performs a isert_put_conn for the final put while iscsi_np process context is still blocked in isert_get_login_rx once isert_get_login_rx is awoking due to login timeout iscsi_np process context will attempt to invoke iscsi_target_login_sess_out to cleanup iscsi_conn as expected and calls isert_wait_conn isert_free_conn which triggers the use-after-free oops to address this bug move the kref_get_unless_zero call from isert_connected_handler into isert_connect_request immediately preceeding isert_rdma_accept to ensure the cm handler cleanup paths and isert_free_conn are always operating with two refs
70f19f5869c5accfd9f371c099f21c71516591b2	udf dont corrupt unalloc spacetable when writing it for a udf filesystem configured with an unallocated space table a filesystem operation that triggers an update to the table results in on-disk corruption that prevents remounting udf_read_tagged tag version __number__ block __number__ for example __number__ create a filesystem mkudffs __number__ mount it mount __number__ create a file echo no corruption please __number__ umount umount __number__ attempt remount mount this appears to be a longstanding bug caused by zero-initialization of the unallocated space entry block buffer and only partial repopulation of required fields before writing to disk commit udf fix unalloc space handling in udf_update_inode addressed one such field but several others are required
a057001e9e446f2195c34bc55c57e5cf353c99d6	arm64 kvm vgic-v3 prevent the guest from messing with icc_sre_el1 both our gic emulations are strict in the sense that we either emulate a gicv2 or a gicv3 and not a gicv3 with gicv2 legacy support but when running on a gicv3 host we still allow the guest to tinker with the icc_sre_el1 register during its time slice it can switch sre off observe that it is off and yet on the next world switch find the sre bit to be set again not very nice an obvious solution is to always trap accesses to icc_sre_el1 by clearing and to let the handler return the programmed value on a read or ignore the write that way the guest can always observe that our gicv3 is only
6ed1002f368c63ef79d7f659fcb4368a90098132	crush allow crush rules to set retries counts to __number__ these two fields are misnomers they are counts reflects commit f17caba8ae0cad7b6f8f35e53e5f73b444696835
0be1fecd7ee61b5a6d2b2e94b052b8a070b946ef	md faulty use disk_stack_limits in block do not artificially constrain max_sectors for stacking drivers max_sectors defaults to uint_max md faulty wasnt using disk_stack_limits so inherited this large value as well this triggered a bug in xfs when stressed over md_faulty when a very large bio_alloc failed that was on an older kernel and i cant reproduce exactly the same thing upstream but i think the fix is appropriate in any case thanks to mike snitzer for pointing out the problem
c0a03a2e4c4e954d9acffd3ce3521e64654c9dc8	reset csb read pointer in ring init a previous commit enabled execlists by default commit enable execlists by default where supported this allowed routine testing of execlists which exposed a regression when resuming from suspend the cause was tracked down the to recent changes to the ring init sequence commit only init engines once during a cycle the hardware context status buffer write pointer is reset however since the recent changes to the init sequence the software csb read pointer is no longer reset this means that context status events are not handled correctly and new contexts are not written to the elsp resulting in an apparent gpu hang pending further changes to the ring init code just move the initialization into gen8_init_common_ring to fix this regression v2 moved init into gen8_init_common_ring rather than context_enable after feedback from daniel vetter updated commit msg to reflect this and also cite commits related to the regression fixed bz link to correct bug bugzilla
ff1b129403aad9a5c7cc9a6eaaffe4bd5fc0c67f	add px quirk for asus k53tk seems to have problems turning the dgpu bug
87809839a56603b3ace6e7250a81afadcd916691	dmaengine at_xdmac fix missing spin_unlock lock taken when entering the function but unlock missing before it returns
586b7ccdb7143b6a9b975d2c6ad52b6ca5c162b9	kvm s390 fix hang vcpu regression commit kvm s390 optimize round trip time in request handling introduced a regression this regression was seen with cpu hotplug in the guest and switching between __number__ or __number__ cpus this will the ibs control via synced request whenever we make a synced request we first set the bit and then block the vcpu the handler on the other hand unblocks itself processes by clearing them and unblocks itself once again now if the requester sleeps between setting of and blocking the handler will clear the bit and try to unblock itself although no bit is set when the requester wakes up it blocks the vcpu and we have a blocked vcpu without requests solution is to always unset the block bit
0d2f096b8785b67c38afcf6e1fbb9674af2e05ca	random fix handing of arch_get_random_long in get_random_bytes if there is an architecture-specific random number generator we use it to acquire randomness one long at a time we should put these random words into consecutive words in the result buffer not just overwrite the first word again and again link
254706056be7e4e161ae9675ead6cd4e269be966	ext4 fix ext4 mismerge back in january duplicate caused afaics by mismerge in
117688a9c1023af9241810544b35c7104fbbcfc2	alsa hda correct aamix output paths the output paths including aamix should be parsed only for the first output the surround paths including aamix must be wrong since it would mix all streams all channels would be mixed into a single and multiplexed again
356d7d88e088687b6578ca64601b0a2c9d145296	netfilter nf_conntrack fix tcp_in_window for fast open currently the conntrack checks if the ending sequence of a packet falls within the observed receive window however it does so even if it has not observe any packet from the remote yet and uses an uninitialized receive window td_maxwin if a connection uses fast open to send a syn-data packet which is dropped afterward in the network the subsequent syns retransmits will all fail this check and be discarded leading to a connection timeout this is because the syn retransmit does not contain data payload so end initial sequence number isn __number__ isn syn_data_len __number__ the fix is to only apply this check after td_maxwin is initialized
62b5cb757f1d6c875293958535952dd38ff9e675	dmaengine at_xdmac fix memory leak in interleaved mode in interleaved mode when numf __number__ we have only one descriptor for the transfer but this descriptor has to be added to the descs_list if not when doing remove_xfer the descriptor wont be put back in the free_descs_list
f2e5ff85edea30a59b96cf9e20e8886991b0d097	ksm dont fail stable tree lookups if walking over stale stable_nodes the stable_nodes can become stale at any time if the underlying pages gets freed the stable_node gets collected and removed from the stable rbtree if that is detected during the rbtree lookups dont fail the lookup if running into stale stable_nodes just restart the lookup after collecting the stale stable_nodes otherwise the cpu spent in the preparation stage is wasted and the lookup must be repeated at the next loop potentially failing a second time in a second stale stable_node if we dont prune aggressively we delay the merging of the unstable node candidates and at the same time we delay the freeing of the stale stable_nodes keeping stale stable_nodes around wastes memory and it cant provide any benefit
85734b1a5de80341d7d01cd29bbea9cf6f77094b	input synaptics fix min-max quirk value for commit input synaptics add quirk for thinkpad had a typo in ymax this changes the value to the one reported by touchpad-edge-detector and mentioned in the commit
2b94e8960cc3f225dec058f27570505351f4bc13	dm thin fix crash by initializing thin devices refcount and completion earlier commit dm thin do not allow thin device activation while pool is suspended delayed the initialization of a new thin devices refcount and completion until after this new thin was added to the pools active_thins list and the pool lock is released this opens a race with a worker thread that walks the list and calls noticing that the refcount goes to __number__ and calling complete freezing up the system and giving the oops below kernel bug unable to handle kernel null pointer dereference at null kernel ip __address__ kernel call trace kernel __address__ kernel __address__ kernel __address__ dm_thin_pool kernel __address__ dm_thin_pool kernel __address__ kernel __address__ kernel __address__ kernel __address__ kernel __address__ kernel __address__ kernel __address__ kernel __address__ set the thin devices initial refcount and initialize the completion before adding it to the pools active_thins list in thin_ctr
cc7059b5ea730edde256deb94a42f8e9e732d9b8	fix indexed emulation indexed instructions where the index register such as lfdx are not illegal indexed with update instructions where the index register such as lfdux are invalid and to be consistent with existing math-emu behavior for other invalid instruction forms will signal as illegal
0cbb39f1432096cf00eca21f2d10f6d2057c26ba	iio adc twl4030_madc fix calculation of the temperature sense current the bit mask to read the setting of the constant current source for measuring the ntc voltage was the wrong one since default value is initialized to the lowest level __number__ the difference was probably never noticed in practice
2f0d2604134880f739642fd7c3ae55db33c838e7	input i8042 i8042_flush fix for a full __number__ buffer when __number__ internal data buffer is full the driver erroneously decides that the controller is not present i8042_flush returns the number of flushed bytes which is in __number__ i8042_buffer_size range inclusive therefore i8042_flush has no way to indicate an error moreover i8042_controller_check takes initially full buffer i8042_flush returned i8042_buffer_size as a sign of absence of the controller lets change i8042 to return instead and make sure we do not return error prematurely
bb6a1b2e189f797c0e4a116aec7ce77c344f11e0	um segv save regs only in case of a kernel mode fault me lose user mode regs and the resulting stack trace is useless
2afe8be85c2c79fc574c0d322ab60921d5deed43	alsa intel8x0 use ktime and ktime_get do_posix_clock_monotonic_gettime is a leftover from the initial posix timer implementation which maps to ktime_get_ts and returns the monotonic time in a timespec use ktime based ktime_get and use the ktime_delta_us function to calculate the delta instead of open coding the timespec math
e31885dd901e80d5bd528c1cbedde07ebbf051b2	add t10 pi iov sgl memory mapping logic this patch adds vhost_scsi_map_iov_to_prot to perform the mapping of t10 data integrity memory between virtio iov struct scatterlist using get_user_pages_fast following existing code as with vhost_scsi_map_iov_to_sgl this does sanity checks against the total prot_sgl_count vs pre-allocated sgls and loops across protection iovs using vhost_scsi_map_to_sgl to perform the actual memory mapping also update tcm_vhost_release_cmd to release associated tvc_prot_sgl struct page
74d813cf37c210e94d155b0c19598fe269b8f78c	asoc hdmi mark the maximum significant bits to hdmi codec hdmi audio can not have more than __number__ bits even if on i2s bus there would be __number__ bit samples mark this by adding __number__ to playback stream definition
1c2e54e1ed6f0a87ae628c520768a53dc60bc2f4	dm thin bump thin and thin-pool target versions commit dm thin metadata speed up discard of partially mapped volumes or some other dm-thinp change during the linux __float__ development window really shouldve bumped these target versions
2c40c66a79d6bbe7151c49983400e1f51c3a9c4e	staging rtl8192e rename dm_checktxpowertracking_thermalmeter use naming schema found in other rtlwifi devices rename dm_checktxpowertracking_thermalmeter to _rtl92e_dm_check_tx_power_tracking_thermal
5a3935c7643966e4172e7a704a48a35f9b4dc668	asoc arizona calculate fll gain last no part of the fll calculation depends on the value determined for the gain but the gain does depend on other values in preparation for future updates this patch moves the gain to be the last thing calculated
3f24bf70a4974122841eb13e3a0621680bd19501	regulator rc5t583 allow missing init_data for diagnostics the regulator core supports this to allow the configuration to be inspected at runtime even if no software management is enabled
6bd2960080bc5842159d89a8d476a9044225788c	mtd st_spi_fsm provide the sequence for enabling addressing mode the fsm serial flash controller is driven by issuing a standard set of register writes we call a message sequence this patch supplies a method to prepare the message sequence responsible for setting addressing mode on the flash chip acked-by angus clark
0b485143d835c019cddc45f46e4b3873dcc9aa4e	btrfs fix warning for build of there have been __number__ warnings on build they are herewith fixed
7a062782295a896f697137aacbe23400fbbafa94	add pci error injection debugfs entry the patch adds debugfs file err_injct which accepts following formated string to support error injection it will be used to support userland utility errinjct in future pci errors pci errors
97439d0f84942d3031545e80852dde09457136c6	pps pps_kc_hardpps_lock can be static sparse symbol pps_kc_hardpps_lock was not declared should it be sparse symbol pps_kc_hardpps_dev was not declared should it be sparse symbol pps_kc_hardpps_mode was not declared should it be
f876f59e4515a94b277d01c6e61ef4cf0733af15	staging et131x reduce split lines in et131x_rx_dma_memory_free
a77b15a60cb1d54d87e8794bfbc94c9ccee679ed	bluetooth add hci authentication capabilities macros add macros for the hci capabilities as described in the bluetooth core specification volume __number__ part e section
90fcba65d29e3fc35847a5bb46ecaa87ab412685	mac80211 add vht capabilities station debugfs file add a new debugfs file to view a stations vht capabilities
a9356a04fab912289b886824cb4b1d461987a910	arm perf move platform device to struct arm_pmu currently the arm perf code supports having a single struct platform_device to supply irq numbers limiting it to supporting a single pmu this patch makes a platform_device instance variable on struct arm_pmu this should allow for multiple pmus to be supported in future
55705639807387d1f2637fd6ee9fd8cc087f3903	net atl1c change variable type to bool the variable ret is only assigned the values true and false the function atl1c_read_eeprom already returns bool change ret type to bool the simplified semantic patch that find this problem is as follows type t identifier b t bool b when any b
44396c7bce449eb6bcb862c6336f5da9ff44c867	staging gs_fpgaboot remove unnecessary out of memory message this patch fixes possible unnecessary out of memory message warning in
d3fd2e2bc29b1f0979352994f9035359003461c3	scsi isci update version to __float__ bump the version now that the driver has atapi support and the initial round of hotplug fixes the experimental tag should have been removed a while back while were here also kill the select scsi_sas_host_smp as the build error was separately fixed by commit scsi libsas fix try_test_sas_gpio_gp_bit build error
9c2606b77d6bffb422928bca66c8dc84d85089be	use pfn_to_nid instead of page_to_nidpfn_to_page use pfn_to_nidpfn instead of page_to_nidpfn_to_pagepfn
b639e09608f0103761751d707e837a7ca01d82a7	staging comedi vmk80xx cleanup digital input subdevice init remove the sdf_ground flag from this flag only has meaning for analog subdevices add the missing for the subdevice rename the and functions for the digital input subdevice to make grepping easier for aesthetic reasons add some whitespace to the subdevice init
050c542938359f6629d28282f9234fdda0b29b33	arm scoop use gpiochip data pointer this makes the driver use the data pointer added to the gpio_chip to store a pointer to the state container instead of relying on container_of
fba45ceac46e1508fdefd3fe501be04bb3399792	usb gadget fsl_qe_udc use udc-cores reset notifier replace usb_gadget_drivers disconnect with udc-cores reset notifier at bus reset handler
2b246283277862c4866a005852af5c70fd581824	spi-topcliff-pch change company name oki semiconductor to lapis semiconductor on october __number__ in __number__ oki semiconductor ltd changed the company name in to lapis semiconductor ltd
f344b0d940d2da88c23b864f818da43081ce300f	bond track sum of rx_nohandler for all slaves sample output with this set applied for an active-backup bond cat __number__ cat __number__ cat __number__
4b282fbe97412cc06fd9f173b4318e69a90b3442	usb gadget m66592-udc dont assign directly udc-core provides a better way to handle release methods lets use it
fb9e3534768c1daa0bd09dd00d1a8828e15079c8	md convert md_trim_bio to use bio_advance
e125d1471a4f8f1bf7ea9a83deb8d23cb40bd712	rbtree optimize case selection logic in __rb_erase_color in __rb_erase_color we have to select one of __number__ cases depending on the color on the other node children if both children are black we flip a few node colors and iterate otherwise we do either one or two tree rotations depending on the color of the other child opposite to node and then we are done the corresponding logic had duplicate checks for the color of the other child opposite to node it was checking it first to determine if both children are black and then to determine how many tree rotations are required rearrange the logic to avoid that extra check
a788a4a040e003574b8ad17115706ab1601ec572	fix error handling this is likely that checking instead of is expected here
754f0da0dc33e8322f7f447aac8e16d581c324ab	x86 intel-mid remove weak from function declarations for the following interfaces get_penwell_ops get_cloverview_ops get_tangier_ops there is only one implementation so they do not need to be marked weak remove the weak attribute from their declarations
c86f86e9e75e77e4d51ded9edbad30834ff606f7	rbd make snap_size order parameter optional only one of the two callers of _rbd_dev_v2_snap_size needs the order value returned so make that an optional argument--a null pointer if the caller doesnt need it
28998e005bb669b60de0e432d6f142267f5c1403	staging changed return type of lis3l02dq_read_event_config to int the lis3l02dq_read_event_config function returned an ssize_t up to now which lead to a compiler warning in line __number__ initialization from incompatible pointer type the iio_info struct is defined to accept an int-returning function as the read_event_config parameter also it seems odd to have the check for ret __number__ and return ret in this case when the return type is signed
776a347df61780111574ee8875e5f7d756817de8	media v4l s5k4ecgx return v4l2_field_none from pad-level set format the sensor is progressive always return the field order set to v4l2_field_none
1958c7c284298f0d17a1ab3820c77c40ea3d3711	local functions should be static this quiets the sparse noise warning symbol _calc_trunk_info was not declared should it be
8ec1d9be323388550b3eb4390c23217ea0711013	iphc use sizeof in udp uncompression
dd2a0a35c3121a88af3c2228a0bc497b5e4a7f56	remove useless name variable and assignment there is no use of name pointer get rid of its useless assignment
0ea5a520f73ca31abc4c10b6d5bc14a884a0641b	seqcount provide raw_read_seqcount raw_read_seqcount opens a read critical section of the given seqcount without any lockdep checking and without checking or masking the lsb calling code is responsible for handling that preparatory patch to provide a nmi safe clock monotonic accessor function
5349d3d880cdfdeda918f6e84e490f2e86f9d810	staging brcm80211 use kzalloc use kzalloc rather than kmalloc followed by memset with __number__ this considers some simple cases that are common and easy to validate note in particular that there are no in the rule so all of the matched code has to be contiguous the semantic patch that makes this output is available in more information about semantic patching is available at
9f4bd4cddbb50d7617353102e10ce511c5ef6df2	workqueue introduce cwq_set_max_active helper for thaw_workqueues using a helper instead of open code makes thaw_workqueues clearer the helper will also be used by the next patch tj slight update to comment and description
f2d476a110bc24fde008698ae9018c99e803e25c	use ttm_bo_reserve_slowpath_nolru in ttm_eu_reserve_buffers v2 this requires re-use of the seqno which increases fairness slightly instead of spinning with a new seqno every time we keep the current one but still drop all other reservations we hold only when we succeed we try to get back our other reservations again this should increase fairness slightly as well changes since v1 increase val_seq before calling ttm_bo_reserve_slowpath_nolru and retrying to take all entries to prevent a race
45d116ec2503c4255374e11c2c48f81cdf6d0f1d	max8998_charger allow full timeout not set leave it unchanged add a missing break for case __number__ of otherwise it will fall through to the default case and return error
a3e2078d6a14bc67e733f7dbd32d1bc4051c9d90	extcon arizona suppress duplicate jackdet reports in cases where we see a brief disconnection of the jack detection signals we may see a noop jack insertion or removal where the jack has returned to the original state by the time the interrupt is serviced suppress these events in order to save work and avoid confusing the rest of the code
8225161545a67bdb68cf86beafcdce1604720605	netfilter nfnetlink_log remove unnecessary error messages in case of oom theres nothing userspace can do if theres no room to put the payload in __build_packet_message jump to nla_put_failure which already performs the corresponding error reporting
060e3fe398479c067e8edcee5862500534cb75dd	staging comedi adv_pci1710 remove ai_timer2 from private data this member of the private data is set to __number__ but it is never used just remove it
8c01a529b861ba97c7d78368e6a5d4d42e946f75	vfs remove unnecessary d_unhashed check from __d_lookup_rcu the check for d_unhashed is not strictly incorrect but at the same time it is also not sensible the actual dentry removal from the dentry hash chains is totally asynchronous to the __d_lookup_rcu logic and we depend on __d_drop updating the sequence number to invalidate any lookup of an unhashed dentry so checking d_unhashed is not incorrect but its not useful either the code has to work correctly even without it so just remove it
14ac59349c04caedb53a75c85d19cf7d68992748	hdmi5 add interlace support add the missing bits for interlace set vblank_osc if the videomodes vblank is fractional halve the vertical timings for interlace double the horizontal timings for double-pixel mode set fc_prconf properly for double-pixel mode
5a02cbd10d37889d8214e82d57ccc70307edf805	ixgbe roll rsc code into non-eop code this change moves the rsc code into the non-eop descriptor handling function the main motivation behind this change is to help reduce the overhead in the non-rsc case previously the non-rsc path code would always be checking for append count even if rsc had been disabled now this code is completely skipped in a single conditional check instead of having to make two separate checks
9819a9024eabee7bb793bbbb3f3833dfaf222dc9	brcmfmac take memory into account for sdio shared info the firmware provides pointer to sdio shared information at end of ram during firmware initialization end of ram is obviously determined by the actual ram size but part of that may be used for memory in that case another location in ram will hold the pointer
0bfd6075cf23d960198235b52f2fe941d7b397a2	sunbmac remove unused local variable commit eb716c54b1c71ad28ab20461bff831bd481066c4 sunbmac remove unnecessary setting of caused the local varible dev in bigmac_init_rings to become unused and now the compiler warns about it
12381dc0c764ecd1703adc6d23c869006223dab8	dma dw return dma_success immediately from device_tx_status there is no point to go throught the rest of the function if first call to dma_cookie_status returned dma_success
6be4506e34cf6075a1307b646e0a6c46c1c9010d	ovl check lowerdir amount for non-upper mount recently multi-lower layer mount support allow upperdir and workdir to be omitted then cause overlayfs can be mount with only one lowerdir directory this action make no sense and have potential risk this patch check the total number of lower directories to prevent mounting overlayfs with only one directory also an error message is added to indicate lower directories exceed ovl_max_stack limit
1c5176692457c3f249559d29a69affad7447b326	usb oti6858 fix abuse of interface data fix abuse of interface data which was used to signal device disconnect note that neither tiocmset or tiocmget need to check for disconnect as they do not access the device
2f4285d17d3a5ae42e2811005dbcd4818d5d6ebe	staging silicom fix dangerous if condition in checkpatch script returns the following warning error do not use assignment in if condition if dev_num this patch fixes the if condition by splitting it
356e9fa4e59afe0a63bcd519504ed3f64b83ab24	iio gyro adis16260 remove redundant break break after return is redundant remove it
